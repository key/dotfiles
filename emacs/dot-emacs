(push "~/.emacs.d/" load-path)

;; Show tab, zenkaku-space, white spaces at end of line
;; http://www.bookshelf.jp/soft/meadow_26.html#SEC317
(defface my-face-tab         '((t (:foreground "LightBlue" :underline t))) nil :group 'my-faces)
(defface my-face-zenkaku-spc '((t (:foreground "LightBlue" :underline t))) nil :group 'my-faces)
(defface my-face-spc-at-eol  '((t (:foreground "Red" :underline t))) nil :group 'my-faces)
(defvar my-face-tab         'my-face-tab)
(defvar my-face-zenkaku-spc 'my-face-zenkaku-spc)
(defvar my-face-spc-at-eol  'my-face-spc-at-eol)
(defadvice font-lock-mode (before my-font-lock-mode ())
  (font-lock-add-keywords
   major-mode
   '(("\t" 0 my-face-tab append)
     ("　" 0 my-face-zenkaku-spc append)
     ("[ \t]+$" 0 my-face-spc-at-eol append)
     )))
(ad-enable-advice 'font-lock-mode 'before 'my-font-lock-mode)
(ad-activate 'font-lock-mode)
;; settings for text file
(add-hook 'text-mode-hook
          '(lambda ()
             (progn
               (font-lock-mode t)
               (font-lock-fontify-buffer))))

(autoload 'ansi-color-for-comint-mode-on "ansi-color"
	     "Set `ansi-color-for-comint-mode' to t." t)
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)

(setq default-frame-alist
      (append (list '(foreground-color . "azure3")
		    '(background-color . "black")
		    '(border-color . "black")
		    '(mouse-color . "white")
		    '(cursor-color . "white")
		    '(width . 175)
		    '(height . 47)
		    '(top . 0)
		    '(left . 0)
		    '(alpha . (85 60)))    ;;ここ
		    default-frame-alist))

;;; アウトラインモード(php)
 (add-hook
  'php-mode-hook
  '(lambda ()
    (setq outline-regexp "^<\\?\\|^\\?>\\|^class\\|^  function\\|^    function\\|^/\\*\\*\\|^  /\\*\\*\\|^    /\\*\\*")
    (setq outline-level
     (function (lambda ()
      (save-excursion
        (let ((str nil))
          (looking-at outline-regexp)
          (setq str (buffer-substring-no-properties
                     (match-beginning 0) (match-end 0)))
          (cond
           ((string-match "^/\\*\\*" str) 1)
           ((string-match "^<\\?" str) 1)
           ((string-match "^\\?>" str) 1)
           ((string-match "^class" str) 1)
           ((string-match "^  /\\*\\*" str) 2)
           ((string-match "^    /\\*\\*" str) 2)
           ((string-match "^  function" str) 3)
           ((string-match "^    function" str) 3)
           ))))))
     (outline-minor-mode t)
     (hide-body)))

;; ついでにタブ幅なんかも
(add-hook
 'php-mode-hook
 '(lambda ()
    (setq tab-width 2
          c-basic-offset 2
          c-hanging-comment-ender-p nil
          indent-tabs-mode nil))
 )

;(load "~/.elisp/migemo.el")
;(load "migemo.elc")
;(setq migemo-command "migemo")
;(setq migemo-options '("-q" "--emacs" "-i" "\a"))
;(setq migemo-dictionary "/usr/share/migemo/migemo-dict")
;(setq migemo-user-dictionary nil)
;(setq migemo-regex-dictionary nil)
;(setq migemo-use-pattern-alist t)
;(setq migemo-use-frequent-pattern-alist t)
;(setq migemo-accept-process-output-timeout-msec 80)


;(set-language-environment 'Japanese)
;(set-terminal-coding-system 'utf-8)
;(setq file-name-coding-system 'utf-8)
;(set-clipboard-coding-system 'utf-8)
;(setq default-buffer-file-coding-system 'utf-8)
;(setq coding-system-for-read 'mule-utf-8-unix)
;(prefer-coding-system 'utf-8)
;(set-default-coding-systems 'utf-8)
;(set-keyboard-coding-system 'utf-8)
;(set-buffer-file-coding-system 'utf-8-unix)
;
;;.emacs
(setq w3m-use-cookies t)
(setq inhibit-startup-message t)
;(require 'un-define)
(coding-system-put 'utf-8 'category 'utf-8)
(set-language-info
"Japanese"
'coding-priority (cons 'utf-8
(get-language-info "Japanese" 'coding-priority)))
(set-language-environment "Japanese")
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-buffer-file-coding-system 'utf-8)
(setq default-buffer-file-coding-system 'utf-8)
;(push "/usr/local/share/emacs/site-lisp/anthy/" load-path)
;(load-library "anthy")
;(setq default-input-method "japanese-anthy")

;; mode-color
;(set-face-foreground 'modeline "gainsboro")
;(set-face-background 'modeline "navy")
;;;(set-face-background 'region "light blue")
;;;(set-face-background 'trailing-whitespace "plum")
;;;(set-face-foreground 'isearch "white")
;;;(set-face-background 'isearch "blue")
;;;(set-face-background 'mouse "black")
;;;(setq font-lock-maximum-decoration t)
(global-font-lock-mode t)
;;;(set-face-foreground 'font-lock-builtin-face "lightblue4")
;;;(set-face-foreground 'font-lock-comment-face "bisque1")
;;;(set-face-foreground 'font-lock-constant-face "blue")
;;;(set-face-foreground 'font-lock-function-name-face "blue")
;;;(make-face-bold 'font-lock-function-name-face)
;;;(set-face-foreground 'font-lock-keyword-face "forest green")
;;;(make-face-bold 'font-lock-keyword-face)
;;;(set-face-foreground 'font-lock-string-face "green")
;;;(set-face-underline-p 'font-lock-string-face t)
;;;(set-face-foreground 'font-lock-type-face "plum")
;;;(set-face-foreground 'font-lock-variable-name-face "gold4")
;;;(defadvice html-mode
;;;  (after tag-unbolding activate)
;;;      (make-face-unbold 'font-lock-function-name-face)
;;;      )
;;;      (show-paren-mode t)
;;;      (setq show-paren-style 'mixed)
;;;      (set-face-background 'show-paren-match-face "RoyalBlue1")
;;;      (set-face-foreground 'show-paren-match-face "black")
;;;      (set-face-background 'show-paren-mismatch-face "Red")
;;;      (set-face-foreground 'show-paren-mismatch-face "black")


;;(load-library "~/.elisp/php-mode.elc")

(autoload 'php-mode "php-mode")
(setq auto-mode-alist
      (cons '("\\.php[34]?$" . php-mode) auto-mode-alist))
(setq auto-mode-alist
      (cons '("\\.phtml?$" . php-mode) auto-mode-alist))

(setq php-manual-url "http://www.php.net/manual/ja/")
(add-hook 'php-mode-user-hook
	  '(lambda ()
	     (progn
	       (setq c-toggle-hungry-state 1)
	       (setq c-basic-offset 2)
	       (setq c-hanging-comment-ender-p nil)
	       (setq indent-tabs-mode nil))))

;; yaml-mode
;(load-library "/home/key/.elisp/yaml-mode.el")
(require 'yaml-mode)
(add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))
(global-set-key "\C-h" 'delete-backward-char)
(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(rst-level-face-base-color "black")
 '(tool-bar-mode nil))
(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 )

;; ミニバッファ履歴リストの最大長：tなら無限
(setq history-length t)
;; session.el
;;   kill-ringやミニバッファで過去に開いたファイルなどの履歴を保存する
(when (require 'session nil t)
  (setq session-initialize '(de-saveplace session keys menus places)
        session-globals-include '((kill-ring 50)
                                  (session-file-alist 500 t)
                                  (file-name-history 10000)))
  (add-hook 'after-init-hook 'session-initialize)
  ;; 前回閉じたときの位置にカーソルを復帰
  (setq session-undo-check -1))
;; minibuf-isearch
;;   minibufでisearchを使えるようにする
(require 'minibuf-isearch nil t)

(require 'snippet)

(require 'rst)
(setq auto-mode-alist
      (append '(("\\.txt$" . rst-mode)
                ("\\.rst$" . rst-mode)
                ("\\.rest$" . rst-mode)) auto-mode-alist))



;;; js2-mode
(autoload 'js2-mode "js2" nil t)
(add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))

; fixing indentation
; refer to http://mihai.bazon.net/projects/editing-javascript-with-emacs-js2-mode
(autoload 'espresso-mode "espresso")

(defun my-js2-indent-function ()
  (interactive)
  (save-restriction
    (widen)
    (let* ((inhibit-point-motion-hooks t)
           (parse-status (save-excursion (syntax-ppss (point-at-bol))))
           (offset (- (current-column) (current-indentation)))
           (indentation (espresso--proper-indentation parse-status))
           node)

      (save-excursion

        ;; I like to indent case and labels to half of the tab width
        (back-to-indentation)
        (if (looking-at "case\\s-")
            (setq indentation (+ indentation (/ espresso-indent-level 2))))

        ;; consecutive declarations in a var statement are nice if
        ;; properly aligned, i.e:
        ;;
        ;; var foo = "bar",
        ;;     bar = "foo";
        (setq node (js2-node-at-point))
        (when (and node
                   (= js2-NAME (js2-node-type node))
                   (= js2-VAR (js2-node-type (js2-node-parent node))))
          (setq indentation (+ 4 indentation))))

      (indent-line-to indentation)
      (when (> offset 0) (forward-char offset)))))

(defun my-indent-sexp ()
  (interactive)
  (save-restriction
    (save-excursion
      (widen)
      (let* ((inhibit-point-motion-hooks t)
             (parse-status (syntax-ppss (point)))
             (beg (nth 1 parse-status))
             (end-marker (make-marker))
             (end (progn (goto-char beg) (forward-list) (point)))
             (ovl (make-overlay beg end)))
        (set-marker end-marker end)
        (overlay-put ovl 'face 'highlight)
        (goto-char beg)
        (while (< (point) (marker-position end-marker))
          ;; don't reindent blank lines so we don't set the "buffer
          ;; modified" property for nothing
          (beginning-of-line)
          (unless (looking-at "\\s-*$")
            (indent-according-to-mode))
          (forward-line))
        (run-with-timer 0.5 nil '(lambda(ovl)
                                   (delete-overlay ovl)) ovl)))))

(defun my-js2-mode-hook ()
  (require 'espresso)
  (setq espresso-indent-level 4
        indent-tabs-mode nil
        c-basic-offset 4)
  (c-toggle-auto-state 0)
  (c-toggle-hungry-state 1)
  (set (make-local-variable 'indent-line-function) 'my-js2-indent-function)
  ; (define-key js2-mode-map [(meta control |)] 'cperl-lineup)
  (define-key js2-mode-map "\C-\M-\\"
    '(lambda()
       (interactive)
       (insert "/* -----[ ")
       (save-excursion
         (insert " ]----- */"))
       ))
  (define-key js2-mode-map "\C-m" 'newline-and-indent)
  ; (define-key js2-mode-map [(backspace)] 'c-electric-backspace)
  ; (define-key js2-mode-map [(control d)] 'c-electric-delete-forward)
  (define-key js2-mode-map "\C-\M-q" 'my-indent-sexp)
  (if (featurep 'js2-highlight-vars)
      (js2-highlight-vars-mode))
  (message "My JS2 hook"))

(add-hook 'js2-mode-hook 'my-js2-mode-hook)
